@page "/drivers/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Driver</h3>
<hr />
<br />
<EditForm Model="@driver" OnValidSubmit="CreateDriver">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name: </label>
        <div>
            <InputText @bind-Value="driver.FirstName" class="form-control" />
            <ValidationMessage For="@(()=> driver.FirstName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Last Name: </label>
        <div>
            <InputText @bind-Value="driver.LastName" class="form-control" />
            <ValidationMessage For="@(()=> driver.LastName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Driving License: </label>
        <div>
            <InputText @bind-Value="driver.DrivingLicense" class="form-control" />
            <ValidationMessage For="@(()=> driver.DrivingLicense)" />
        </div>
    </div>

    <div class="form-group">
        <label>Contact Number: </label>
        <div>
            <InputText @bind-Value="driver.ContactNumber" class="form-control" />
            <ValidationMessage For="@(()=> driver.ContactNumber)" />
        </div>
    </div>

    <div class="form-group">
        <label>Email Address: </label>
        <div>
            <InputText @bind-Value="driver.EmailAddress" class="form-control" />
            <ValidationMessage For="@(()=> driver.EmailAddress)" />
        </div>
    </div>

    <button type="submit" class=" btn btn-success btn-block">
        Create Driver
    </button>
</EditForm>

@code {
    Driver driver = new Driver();

    private IList<Driver> Drivers;
    private IList<Feedback> Feedbacks;
    private IList<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Drivers = await _client.GetFromJsonAsync<List<Driver>>($"{Endpoints.DriversEndpoint}");
        Feedbacks = await _client.GetFromJsonAsync<List<Feedback>>($"{Endpoints.FeedbacksEndpoint}");
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
    }

    private async Task CreateDriver()
    {
        await _client.PostAsJsonAsync(Endpoints.FeedbacksEndpoint, driver);
        _navManager.NavigateTo("/drivers/");
    }
}
